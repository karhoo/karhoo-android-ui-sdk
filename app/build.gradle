apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'com.jaredsburrows.license'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

String[] fileFilter = [
        '**/*View*.*',
        '**/*Activity.*'
]
enableJacoco(project, 'Debug', fileFilter)

androidExtensions {
    experimental = true
}

licenseReport {
    generateHtmlReport = true
    copyHtmlReportToAssets = true
}

allOpen {
    annotation("com.karhoo.karhootraveller.util.annotation.OpenForTesting")
}

android {
    testOptions {
        unitTests.returnDefaultValues = true
    }

    configurations.all {
        resolutionStrategy {
            force 'com.google.code.findbugs:jsr305:1.3.9'
        }
    }

    signingConfigs {
        debug {
            storeFile file("../tools/signing/debug.jks")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        staging {
            storeFile file("../tools/signing/staging.jks")
            storePassword 'karhooredlogo'
            keyAlias "karhoo_qa"
            keyPassword 'karhooredlogo'
        }
        prodQA {
            storeFile file("../tools/signing/prodQA.jks")
            storePassword 'karh00pink'
            keyAlias "prodQA"
            keyPassword 'karh00pink'
        }
    }

    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        applicationId "com.karhoo.karhootraveller"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 139
        versionName "1.11.0"
        testInstrumentationRunner "com.karhoo.karhootraveller.common.testrunner.TravellerTestRunner"

        def secureProps = new Properties()
        if (file("secure.properties").exists()) {
            file("secure.properties")?.withInputStream { secureProps.load(it) }
        }
        buildConfigField("String", "KARHOO_SEGMENT_API_KEY_SANDBOX", (secureProps.getProperty("KARHOO_SEGMENT_API_KEY_SANDBOX") ?: ""))
        buildConfigField("String", "KARHOO_SEGMENT_API_KEY_PROD", (secureProps.getProperty("KARHOO_SEGMENT_API_KEY_PROD") ?: ""))

        buildConfigField("String", "GUEST_CHECKOUT_IDENTIFIER", (secureProps.getProperty("GUEST_CHECKOUT_IDENTIFIER") ?: ""))
        buildConfigField("String", "GUEST_CHECKOUT_REFERER", (secureProps.getProperty("GUEST_CHECKOUT_REFERER") ?: ""))
        buildConfigField("String", "GUEST_CHECKOUT_ORGANISATION_ID", (secureProps.getProperty("GUEST_CHECKOUT_ORGANISATION_ID") ?: ""))
        buildConfigField("String", "STAGING_HOST", (secureProps.getProperty("STAGING_HOST") ?: ""))
        buildConfigField("String", "STAGING_AUTH_HOST", (secureProps.getProperty("STAGING_AUTH_HOST") ?: ""))
        buildConfigField("String", "STAGING_GUEST_HOST", (secureProps.getProperty("STAGING_GUEST_HOST") ?: ""))
        manifestPlaceholders = [fabric_api_key: "456443aaa8b67d99edf1ef2c58b84d212cbf3b4b"]
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        def secureProps = new Properties()
        if (file("secure.properties").exists()) {
            file("secure.properties")?.withInputStream { secureProps.load(it) }
        }
        release {
            minifyEnabled false
            resValue "string", "google_maps_api_key", (secureProps.getProperty("GOOGLE_MAPS_API_KEY_RELEASE") ?: "")
            debuggable false
        }
        sandbox {
            minifyEnabled false
            resValue "string", "google_maps_api_key", (secureProps.getProperty("GOOGLE_MAPS_API_KEY_RELEASE") ?: "")
            debuggable true
            signingConfig signingConfigs.prodQA
            applicationIdSuffix ".sandbox"
            versionNameSuffix "-sandbox"
        }
        prodQA {
            minifyEnabled false
            resValue "string", "google_maps_api_key", (secureProps.getProperty("GOOGLE_MAPS_API_KEY_RELEASE") ?: "")
            debuggable true
            signingConfig signingConfigs.prodQA
        }
        debug {
            //this is identical to staging to allow ./gradlew build to run. Debug build not used.
            minifyEnabled false
            resValue "string", "google_maps_api_key", (secureProps.getProperty("GOOGLE_MAPS_API_KEY_DEBUG") ?: "")
            debuggable true
            signingConfig signingConfigs.staging
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
    }
    // This is important, it will run lint checks but won't abort build
    lintOptions {
    }

    //Add the source set from the UISDK for use in the UI Tests in the App layer
    sourceSets {
        androidTest.java.srcDirs += ["${project(':uisdk').projectDir}/src/androidTest/java"]
    }

}

dependencies {
    implementation project(path: ':uisdk')
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'joda-time:joda-time:2.10.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation('com.crashlytics.sdk.android:crashlytics:17.2.2@aar') {
        transitive = true
    }
    implementation "com.segment.analytics.android:analytics:4.3.0-RC2"
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.maps.android:android-maps-utils:0.5'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.karumi:dexter:4.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference-ktx:1.1.1'

    implementation 'androidx.appcompat:appcompat:1.3.0-alpha01'
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.assertj:assertj-core:3.13.2'

    androidTestImplementation 'com.github.tomakehurst:wiremock-standalone:2.25.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation project(path: ':uisdk')
    androidTestImplementation 'com.schibsted.spain:barista:3.2.0'
}
