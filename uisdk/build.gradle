import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'maven-publish'
apply plugin: 'shot'

group = 'com.karhoo.uisdk'
version = '1.0'

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    println 'getCurrentFlavor'
    println tskReqStr

    Pattern pattern;

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if(tskReqStr.contains("test") && tskReqStr.contains("UnitTest"))
        pattern = Pattern.compile("test(\\w+)(Release|Debug)UnitTest")
    else if(tskReqStr.contains("test"))
        pattern = Pattern.compile("test(\\w+)(Release|Debug)")
    else if(tskReqStr.contains("lint"))
        pattern = Pattern.compile("lint(\\w+)(Release|Debug)")
    else if(tskReqStr.contains("compile") && tskReqStr.contains("Kotlin"))
        pattern = Pattern.compile("compile(\\w+)(Release|Debug)Kotlin")
    else if(tskReqStr.contains("process") && tskReqStr.contains("Resources"))
        pattern = Pattern.compile("process(\\w+)(Release|Debug)Resources")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return "";
    }
}

if (getCurrentFlavor().contains('adyen')) {
    println 'Building the -adyen flavour of the UISDK'
    apply from: "$rootDir/uisdk/src/adyen/build.gradle"
} else if (getCurrentFlavor().contains('braintree')) {
    println 'Building the -braintree flavour of the UISDK'
    apply from: "$rootDir/uisdk/src/braintree/build.gradle"
} else if(getCurrentFlavor().contains('full')) {
    println 'Building the -full flavour of the UISDK'
    apply from: "$rootDir/uisdk/src/adyen/build.gradle"
    apply from: "$rootDir/uisdk/src/braintree/build.gradle"
}

android {
    compileSdkVersion 34
    buildToolsVersion '30.0.3'

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1120
        versionName "1.13.4RC2"
        buildConfigField 'int', 'VERSION_CODE', "${versionCode}"
        // fix for version code and name being removed from BuildConfig for libraries starting from AGP 4.1
        buildConfigField 'String', 'VERSION_NAME', "\"${versionName}\""
        // fix for version code and name being removed from BuildConfig for libraries starting from AGP 4.1
        testInstrumentationRunner "com.karumi.shot.ShotTestRunner"
        vectorDrawables.useSupportLibrary = true
        missingDimensionStrategy 'paymentProvider', 'full'
        testApplicationId "com.karhoo.uisdk.test"
    }

    packagingOptions {
        pickFirst 'META-INF/AL2.0'
        pickFirst 'META-INF/LGPL2.1'
    }

    def secureProps = new Properties()
    if (file("../app/secure.properties").exists()) {
        file("../app/secure.properties")?.withInputStream { secureProps.load(it) }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true
    }

    flavorDimensions 'paymentProvider'

    productFlavors {
        adyen {
            dimension "paymentProvider"
            versionNameSuffix "-adyen"
        }
        braintree {
            dimension "paymentProvider"
            versionNameSuffix "-braintree"
        }
        full {
            dimension "paymentProvider"
            versionNameSuffix "-full"
        }
    }

    sourceSets {
        adyen {
            java.srcDirs = ['src/main/java/', 'src/adyen/java']
        }
        braintree {
            java.srcDirs = ['src/main/java/', 'src/braintree/java']
        }
        full {
            java.srcDirs = ['src/main/java/', 'src/adyen/', 'src/braintree/']
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            debuggable true
        }
    }

    defaultPublishConfig "fullRelease"
}



afterEvaluate {
    android.libraryVariants.each { variant ->
        if (variant.flavorName == "adyen") {
            apply from: "$rootDir/uisdk/src/adyen/build.gradle"
        }
        if (variant.flavorName == "braintree") {
            apply from: "$rootDir/uisdk/src/braintree/build.gradle"
        }
        if (variant.flavorName == "full") {
            apply from: "$rootDir/uisdk/src/adyen/build.gradle"
            apply from: "$rootDir/uisdk/src/braintree/build.gradle"
        }

        if (variant.buildType.name != "release") { return }

        println 'Publishing library variant ' + variant.buildType.name + variant.flavorName

        publishing.publications.create(variant.name, MavenPublication) {
            from components.findByName(variant.name)
            groupId 'com.karhoo'
            artifactId "uisdk-${variant.flavorName}"
            version '1.13.4RC2'
        }
    }
}

dependencies {
    api project(':nsdk')

    fullCompileOnly('com.adyen.checkout:drop-in:4.8.0')
    fullCompileOnly('com.braintreepayments.api:drop-in:6.16.0')
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'joda-time:joda-time:2.10.3'
    implementation 'com.google.android.gms:play-services-location:21.2.0'
    implementation 'com.google.android.gms:play-services-maps:18.2.0'
    implementation 'com.google.maps.android:android-maps-utils:0.5'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.karumi:dexter:6.2.3'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.20'
    implementation 'com.github.heetch:Android-country-picker:1.0.6'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.20'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation "org.json:json:20231013"

    androidTestImplementation "com.github.tomakehurst:wiremock-standalone:2.27.2"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
}
